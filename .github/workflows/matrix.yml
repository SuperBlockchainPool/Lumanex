name: Build
on:
  push:
  pull_request:
  release:
    types: [published]
  schedule:
    - cron: '30 3 * * 0'

env:
  TAG: ${{ github.ref }}

jobs:
  # Common Build matrix for builds on Ubuntu VM
  windows_build:
    name: Windows
    runs-on: windows-latest
    env:
      MSBUILD_PATH: "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/MSBuild/15.0/Bin"
      LABEL: windows
    steps:
      - uses: actions/checkout@v2

      - name: Set Visual Studio 2017 PATH
        run: |
          set PATH="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE":%PATH%
          set PATH="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin":%PATH%
          set PATH="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\Bin":%PATH%

      - name: Install Visual Studio 2017 Community
        run: |
          choco install visualstudio2017community --version=15.9.37
          choco install visualstudio2017-workload-vctools

      - name: Install OpenSSL
        run: choco install openssl

      # Install boost
      - name: Install Boost 1.68.0
        run: |
          $link = "https://jaist.dl.sourceforge.net/project/boost/boost-binaries/1.68.0/boost_1_68_0-msvc-14.1-64.exe"
          $path = "C:\boost.exe"
          [Net.WebClient]::new().DownloadFile($link, $path)
          Start-Process C:\boost.exe -ArgumentList "/DIR=C:\local\boost_1_68_0","/VERYSILENT" -Wait
          Get-ChildItem C:\local\boost_1_68_0

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 15 2017 Win64" .. -DBOOST_ROOT=C:/local/boost_1_68_0

      # Build for Windows
      - name: Build
        run: |
          $env:PATH = "$env:PATH;$env:MSBUILD_PATH"
          cd build
          MSBuild Lumanex.sln /p:Configuration=Release /p:PlatformToolset=v141 /m


      # Test the crypto
      - name: Test Crypto
        shell: bash
        run: |
          cd build/src/Release
          ./cryptotest.exe

      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src/Release
          rm -rf lumanex-${TAG}
          mkdir lumanex-${TAG}
          cp *.exe lumanex-${TAG}/
          cp ../../../LICENSE lumanex-${TAG}/
          7z a lumanex-${LABEL}-${TAG}.zip lumanex-${TAG}/
          echo ::set-output name=binary_path::lumanex-${TAG}
          echo ::set-output name=artifact_name::lumanex-${LABEL}-${TAG}
          echo ::set-output name=file_name::lumanex-${LABEL}-${TAG}.zip


      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Release/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/zip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.before_deploy.outputs.artifact_name }}
          path: ./build/src/Release/${{ steps.before_deploy.outputs.binary_path }}
